Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/FTC_14133_2021_Auto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode;// https://first-tech-challenge.github.io/SkyStone/  This is the link to ALL metered of FTC\r\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\r\nimport com.qualcomm.robotcore.eventloop.opmode.Disabled;\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\nimport com.qualcomm.robotcore.hardware.Servo;\r\nimport com.qualcomm.robotcore.util.ElapsedTime;\r\nimport com.qualcomm.robotcore.hardware.DigitalChannel;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport org.firstinspires.ftc.robotcontroller.external.samples.HardwarePushbot;\r\nimport org.firstinspires.ftc.robotcore.internal.network.RobotCoreCommandList;\r\n\r\n@Autonomous(name=\"FTC 14133 2021 Auto\", group=\"Auto\")\r\n    public class FTC_14133_2021_Auto extends LinearOpMode {\r\n    private ElapsedTime runtime = new ElapsedTime();\r\n    private DcMotor leftback = null;        // Sets the variables of the mecanum wheels\r\n    private DcMotor rightback = null;\r\n    private DcMotor lf = null;\r\n    private DcMotor rightfront = null;\r\n    static final double MOTOR_TICK_COUNT = 2800;        //\r\n    private DcMotor Shooter = null;         // Sets the variable of the shooter\r\n    private DcMotor LongArm = null;         // Sets the variable of the arm that is long but there is not a arm that is short\r\n    private DcMotor intake = null;          // Sets the variable of the intake\r\n    private DcMotor conveyor = null;          // Sets the variable of the conveyor\r\n    //   DigitalChannel LimitSwitchLongArm;          // Sets the variable of the LimitSwitchLongArm\r\n    DigitalChannel beamBreak;          // Sets the variable of the beamBreak\r\n    Servo Claw = null;          // Sets the variable of the Claw\r\n    boolean clawstate = false;          // Sets the variable of the clawstate\r\n    boolean toggle = true;          // Sets the variable of the toggle\r\n    int count = 0;\r\n    //double distance = 0;\r\n    //  double turn = 0;\r\n\r\n    void ForwardorBackwards(double distance, double speed) {\r\n        lf.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightfront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        leftback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        //Driving forward/backwards\r\n        //  double distance= 5; //(in)\r\n        double encodercounts = distance * 60.3686819388;//(1/(75*(1/25.4)))*560;\r\n        int encodercountsint = (int) encodercounts;\r\n        lf.setTargetPosition(encodercountsint);\r\n        lf.setPower(speed);        //Sets the power for the Long arm\r\n        rightfront.setTargetPosition(encodercountsint);\r\n\r\n\r\n        rightfront.setPower(speed);        //Sets the power for the Long arm\r\n        leftback.setTargetPosition(encodercountsint);\r\n        leftback.setPower(speed);        //Sets the power for the Long arm\r\n        rightback.setTargetPosition(encodercountsint);\r\n        rightback.setPower(speed);        //Sets the power for the Long arm\r\n        leftback.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightfront.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        lf.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightback.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        while (lf.isBusy() || rightfront.isBusy() || leftback.isBusy() || rightback.isBusy()) {\r\n        }\r\n    }\r\n\r\n\r\n    void Rotate(double turn, double speed) {\r\n        lf.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightfront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        leftback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        //Driving left/right\r\n        //NOT DONE\r\n        double encodercounts = turn * 1.4142135623730950488016887242097; // test iteratively\r\n        int encodercountsint = (int) encodercounts;\r\n        lf.setTargetPosition(-encodercountsint);\r\n        lf.setPower(speed);        //\r\n        rightfront.setTargetPosition(encodercountsint);\r\n        rightfront.setPower(speed);        //Sets the power for the Long arm\r\n        leftback.setTargetPosition(-encodercountsint);\r\n        leftback.setPower(speed);        //Sets the power for the Long arm\r\n        rightback.setTargetPosition(encodercountsint);\r\n        rightback.setPower(speed);        //Sets the power for the Long arm\r\n        leftback.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightfront.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        lf.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightback.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        while (lf.isBusy() || rightfront.isBusy() || leftback.isBusy() || rightback.isBusy()) {\r\n        }\r\n    }\r\n\r\n    void Strafing(double Strafe, double speed) {\r\n        lf.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightfront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        leftback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        //Driving left/right\r\n        //Positive is Strafing left negative is Strafing right\r\n        double encodercounts = Strafe * 60.3686819388 * 1.4142135623730950488016887242097;\r\n        int encodercountsint = (int) encodercounts;\r\n        lf.setTargetPosition(-encodercountsint);\r\n        lf.setPower(speed);        //\r\n        rightfront.setTargetPosition(encodercountsint);\r\n        rightfront.setPower(speed);        //Sets the power for the Long arm\r\n        leftback.setTargetPosition(encodercountsint);\r\n        leftback.setPower(speed);        //Sets the power for the Long arm\r\n        rightback.setTargetPosition(-encodercountsint);\r\n        rightback.setPower(speed);        //Sets the power for the Long arm\r\n        leftback.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightfront.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        lf.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightback.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        while (lf.isBusy() || rightfront.isBusy() || leftback.isBusy() || rightback.isBusy()) {\r\n        }\r\n\r\n\r\n    }\r\n\r\n    boolean IntakeFunction(double speed) {\r\n        intake.setPower(speed);\r\n        if (beamBreak.getState()) {\r\n            conveyor.setPower(speed);\r\n        }\r\n        if (speed == 0) {\r\n            return false;\r\n        } else {\r\n            conveyor.setPower(0);\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    void ShooterFunction(double speed) {\r\n        Shooter.setPower(-speed);\r\n        sleep(500);\r\n        conveyor.setPower(speed);\r\n    }\r\n\r\n    void LongArmFunctionDown() {\r\n        double armrotation = MOTOR_TICK_COUNT * (0.375);\r\n        LongArm.setPower(0.3);        //Sets the power for the Long arm\r\n        LongArm.setTargetPosition((int) armrotation);        //Tell the motor to go to 90 degrees when told to\r\n        LongArm.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        while (LongArm.isBusy()){\r\n        }\r\n    }\r\n\r\n    void LongArmFunctionUP() {\r\n        LongArm.setPower(0.3);        //Sets the power for the Long arm\r\n        LongArm.setTargetPosition(0);        //Tell the motor to go to 90 degrees when told to\r\n        LongArm.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        while (LongArm.isBusy()){\r\n        }\r\n    }\r\n\r\n    public void waitForStart() {\r\n    }\r\n\r\n    public void runOpMode() {\r\n        lf = hardwareMap.get(DcMotor.class, \"lf\");       //sets the names of the motors on the hardware map\r\n        rightfront = hardwareMap.get(DcMotor.class, \"rightfront\");\r\n        leftback = hardwareMap.get(DcMotor.class, \"leftback\");\r\n        rightback = hardwareMap.get(DcMotor.class, \"rightback\");\r\n        LongArm = hardwareMap.get(DcMotor.class, \"LongArm\");\r\n        Shooter = hardwareMap.get(DcMotor.class, \"Shooter\");\r\n        intake = hardwareMap.get(DcMotor.class, \"intake\");\r\n        conveyor = hardwareMap.get(DcMotor.class, \"conveyor\");\r\n        beamBreak = hardwareMap.get(DigitalChannel.class, \"beamBreak\");\r\n        Claw = hardwareMap.get(Servo.class, \"Claw\");\r\n        Shooter.setPower(0.75);\r\n\r\n\r\n        lf.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        rightfront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        leftback.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        rightback.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        LongArm.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        Shooter.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        intake.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        conveyor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n\r\n        Shooter.setDirection(DcMotor.Direction.FORWARD);            //sets the directions of the motors\r\n        lf.setDirection(DcMotor.Direction.FORWARD);\r\n        rightfront.setDirection(DcMotor.Direction.REVERSE);\r\n        leftback.setDirection(DcMotor.Direction.FORWARD);\r\n        rightback.setDirection(DcMotor.Direction.REVERSE);\r\n        //LimitSwitchLongArm.setMode(DigitalChannel.Mode.INPUT);\r\n        beamBreak.setMode(DigitalChannel.Mode.INPUT); // set the digital channel to input.\r\n        Claw.setPosition(1);\r\n        LongArm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        lf.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);        //Since this is the first time using the encoder we start it up\r\n        rightfront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        leftback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n\r\n        boolean intakeon = IntakeFunction(0.5);\r\n        while (intakeon == true) {\r\n            if (!beamBreak.getState()) {\r\n                conveyor.setPower(-1);\r\n            }\r\n            if (beamBreak.getState() && toggle) {\r\n                count = count + 1;\r\n                toggle = false;\r\n            } else {\r\n                toggle = true;\r\n            }\r\n            if (count == 3) {\r\n                intakeon = IntakeFunction(0);\r\n            }\r\n\r\n\r\n        ForwardorBackwards(42, 0.75);\r\n\r\n        Strafing(-18, -0.5);   // scoot left until aligned with top goal\r\n\r\n        ShooterFunction(1);\r\n\r\n        sleep(4000);\r\n\r\n        ForwardorBackwards(-29, -0.2);    // move forward at rings\r\n\r\n        ShooterFunction(1);\r\n\r\n\r\n\r\n        telemetry.addData(\"count\", count);    //\r\n        telemetry.update();\r\n\r\n        if (count == 0) {       // if one ring is picked up, do this portion of code\r\n            ForwardorBackwards(25, 0.5);\r\n\r\n            ShooterFunction(1);\r\n\r\n            sleep(3000);\r\n\r\n            IntakeFunction(0);\r\n\r\n            Strafing(12, -3);\r\n\r\n            LongArmFunctionDown();\r\n\r\n            Claw.setPosition(0);\r\n\r\n            Strafing(-12, 0.75);\r\n\r\n            ForwardorBackwards(6,0.5);\r\n\r\n            LongArm.setTargetPosition(0);\r\n            LongArm.setPower(0.3);        //Sets the power for the Long arm\r\n            LongArm.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        }\r\n        if (count == 2) {\r\n            ForwardorBackwards(25, 3);\r\n\r\n            ShooterFunction(1);\r\n\r\n            sleep(5000);\r\n\r\n            IntakeFunction(0);\r\n\r\n            ForwardorBackwards(9, -3);\r\n\r\n            LongArmFunctionDown();\r\n\r\n            Claw.setPosition(0);\r\n\r\n            LongArm.setTargetPosition(0);\r\n            LongArm.setPower(0.3);        //Sets the power for the Long arm\r\n            LongArm.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        }\r\n        if (count == 3) {\r\n            ForwardorBackwards(25, 3);\r\n\r\n            ShooterFunction(1);\r\n\r\n            sleep(7000);\r\n\r\n            IntakeFunction(0);\r\n\r\n            Strafing(12, -3);\r\n\r\n            ForwardorBackwards(24, 0.75);\r\n\r\n            LongArmFunctionDown();\r\n\r\n            Claw.setPosition(0);\r\n\r\n            LongArm.setTargetPosition(0);\r\n            LongArm.setPower(0.3);        //Sets the power for the Long arm\r\n            LongArm.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TeamCode/src/main/java/org/firstinspires/ftc/teamcode/FTC_14133_2021_Auto.java	(revision 162826ae738a96116896cf964a76c74cf15972d8)
+++ TeamCode/src/main/java/org/firstinspires/ftc/teamcode/FTC_14133_2021_Auto.java	(date 1613879819569)
@@ -206,7 +206,7 @@
             if (count == 3) {
                 intakeon = IntakeFunction(0);
             }
-
+        }
 
         ForwardorBackwards(42, 0.75);
 
@@ -291,5 +291,4 @@
 
             }
         }
-    }
-}
\ No newline at end of file
+    }
\ No newline at end of file
